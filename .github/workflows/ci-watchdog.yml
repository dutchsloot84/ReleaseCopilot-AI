name: CI Watchdog

on:
  schedule:
    - cron: "0 14 * * *"
  workflow_dispatch:
  issue_comment:
    types: [created]

permissions:
  contents: read
  checks: read
  issues: write
  pull-requests: write

jobs:
  scan:
    if: github.event_name != 'issue_comment' || contains(github.event.comment.body, '/watchdog')
    runs-on: ubuntu-latest
    env:
      ORCHESTRATOR_BOT_TOKEN: ${{ secrets.ORCHESTRATOR_BOT_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: python -m pip install --upgrade pip requests

      - name: Run CI watchdog scan
        id: scan
        run: |
          python <<'PY'
          import json
          import os
          from pathlib import Path
          import datetime as dt
          from scripts.github.ci_watchdog import (
              PHOENIX_TZ,
              collect_failures,
              render_report,
              serialize_failures,
          )

          repo = os.environ["GITHUB_REPOSITORY"]
          failures = collect_failures(repo, max_age_hours=72)
          report = render_report(failures)

          now_phx = dt.datetime.now(tz=PHOENIX_TZ)
          phoenix_date = now_phx.strftime("%Y-%m-%d")

          base = Path("artifacts/watchdog")
          status_path = base / phoenix_date / "status.json"
          status_payload = {
              "generated_at": now_phx.isoformat(),
              "repo": repo,
              "failures": serialize_failures(failures),
          }
          status_path.parent.mkdir(parents=True, exist_ok=True)
          status_path.write_text(json.dumps(status_payload, indent=2), encoding="utf-8")

          log_path = base / "activity-log.ndjson"
          log_path.parent.mkdir(parents=True, exist_ok=True)
          with log_path.open("a", encoding="utf-8") as log_file:
              log_file.write(
                  json.dumps(
                      {
                          "timestamp": now_phx.isoformat(),
                          "repo": repo,
                          "failure_count": len(failures),
                      }
                  )
                  + "\n"
              )

          metrics_path = base / "metrics.json"
          metrics_payload = {
              "generated_at": now_phx.isoformat(),
              "failures_scanned": len(failures),
              "autofixes_attempted": 0,
          }
          metrics_path.write_text(json.dumps(metrics_payload, indent=2), encoding="utf-8")

          report_path = base / "report.md"
          report_path.write_text(report, encoding="utf-8")

          with open(os.environ["GITHUB_OUTPUT"], "a", encoding="utf-8") as gh_out:
              gh_out.write(f"failure_count={len(failures)}\n")
              gh_out.write(f"phoenix_timestamp={now_phx.strftime('%Y-%m-%d %H:%M %Z')}\n")
              gh_out.write("failures_json<<EOF\n")
              gh_out.write(json.dumps(serialize_failures(failures)) + "\n")
              gh_out.write("EOF\n")
              gh_out.write("report_markdown<<EOF\n")
              gh_out.write(report + "\n")
              gh_out.write("EOF\n")
              gh_out.write(f"status_path={status_path}\n")

          summary_lines = [
              "### CI Watchdog Scan",
              f"- Phoenix timestamp: {now_phx.strftime('%Y-%m-%d %H:%M %Z')}",
              f"- Failure count: {len(failures)}",
          ]
          with open(os.environ["GITHUB_STEP_SUMMARY"], "a", encoding="utf-8") as summary:
              summary.write("\n".join(summary_lines) + "\n")
          PY

      - name: Publish summary to workflow report
        uses: actions/github-script@v6
        env:
          WATCHDOG_PHOENIX: ${{ steps.scan.outputs.phoenix_timestamp }}
          WATCHDOG_FAILURES: ${{ steps.scan.outputs.failure_count }}
        with:
          github-token: ${{ secrets.ORCHESTRATOR_BOT_TOKEN }}
          script: |
            const details = `### CI Watchdog Totals\n- Phoenix timestamp: ${process.env.WATCHDOG_PHOENIX}\n- Failure count: ${process.env.WATCHDOG_FAILURES}`;
            await core.summary.addRaw(details).write();

      - name: Upload watchdog artifacts
        uses: actions/upload-artifact@v4
        with:
          name: watchdog-${{ github.run_id }}
          path: artifacts/watchdog

  report:
    needs: scan
    if: needs.scan.outputs.failure_count != '0'
    runs-on: ubuntu-latest
    steps:
      - name: Comment on pull requests
        uses: actions/github-script@v6
        env:
          FAILURES_JSON: ${{ needs.scan.outputs.failures_json }}
          REPORT_BODY: ${{ needs.scan.outputs.report_markdown }}
        with:
          github-token: ${{ secrets.ORCHESTRATOR_BOT_TOKEN }}
          script: |
            const failures = JSON.parse(process.env.FAILURES_JSON || '[]');
            for (const prFailure of failures) {
              const body = [
                'CI Watchdog detected failing checks at 07:00 America/Phoenix.',
                '',
                '| Check | Conclusion | Completed |',
                '| --- | --- | --- |',
                ...prFailure.failing_checks.map((check) => `| ${check.name} | ${check.conclusion} | ${check.completed_at} |`),
                '',
                'Full report:',
                '',
                process.env.REPORT_BODY,
              ].join('\n');

              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prFailure.number,
                body,
              });
            }

  autofix:
    needs: scan
    if: github.event_name == 'issue_comment'
    runs-on: ubuntu-latest
    env:
      ORCHESTRATOR_BOT_TOKEN: ${{ secrets.ORCHESTRATOR_BOT_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install tooling
        run: python -m pip install --upgrade pip ruff pytest

      - name: Evaluate autofix gating
        id: gating
        run: |
          python <<'PY'
          import json
          import os
          from scripts.github.ci_watchdog import should_autofix

          with open(os.environ["GITHUB_EVENT_PATH"], "r", encoding="utf-8") as fh:
              event = json.load(fh)

          allowed = should_autofix(event)

          with open(os.environ["GITHUB_OUTPUT"], "a", encoding="utf-8") as gh_out:
              gh_out.write(f"allowed={'true' if allowed else 'false'}\n")
          PY

      - name: Run watchdog autofix
        if: steps.gating.outputs.allowed == 'true'
        run: scripts/github/run_watchdog_autofix.sh

      - name: Record autofix metrics
        if: steps.gating.outputs.allowed == 'true'
        run: |
          python <<'PY'
          import json
          from pathlib import Path
          import datetime as dt
          from zoneinfo import ZoneInfo

          now_phx = dt.datetime.now(tz=ZoneInfo("America/Phoenix"))
          metrics = {
              "generated_at": now_phx.isoformat(),
              "failures_scanned": int("${{ needs.scan.outputs.failure_count || '0' }}"),
              "autofixes_attempted": 1,
          }
          path = Path("artifacts/watchdog/metrics.json")
          path.parent.mkdir(parents=True, exist_ok=True)
          path.write_text(json.dumps(metrics, indent=2), encoding="utf-8")
          PY

      - name: Upload autofix artifacts
        if: steps.gating.outputs.allowed == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: watchdog-autofix-${{ github.run_id }}
          path: artifacts/watchdog
