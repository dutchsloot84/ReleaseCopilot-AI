name: cdk-ci

on:
  pull_request:
    branches:
      - main
    paths:
      - 'infra/**'
      - 'cdk/**'
      - 'cdk.json'
      - 'cdk/cdk.json'
      - 'package*.json'
      - 'requirements*.txt'
      - '.github/workflows/cdk-ci.yml'
  push:
    branches:
      - main
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: us-west-2
  OIDC_ROLE_ARN: ${{ vars.OIDC_ROLE_ARN }}

jobs:
  validate:
    name: Validate CDK app
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: infra/cdk
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: infra/cdk/requirements.txt

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Python preflight
        run: |
          python scripts/preflight.py
          python run_cdk_app.py --help || true

      - name: Configure AWS credentials
        if: env.OIDC_ROLE_ARN != ''
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.OIDC_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: cdk-deploy-${{ github.run_id }}

      - name: Who am I
        if: env.OIDC_ROLE_ARN != ''
        run: aws sts get-caller-identity

      - name: CDK list
        run: npx -y aws-cdk@2 cdk list

      - name: CDK synth
        run: npx -y aws-cdk@2 cdk synth

      - name: CDK diff
        continue-on-error: true
        run: npx -y aws-cdk@2 cdk diff || true

      - name: Upload synthesized app
        if: always() && hashFiles('infra/cdk/cdk.out/**') != ''
        uses: actions/upload-artifact@v4
        with:
          name: cdk.out
          path: infra/cdk/cdk.out

  deploy:
    name: Deploy CDK app
    runs-on: ubuntu-latest
    needs: validate
    if: >-
      github.event_name == 'push' &&
      (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
    defaults:
      run:
        working-directory: infra/cdk
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.OIDC_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: cdk-deploy-${{ github.run_id }}

      - name: Who am I
        run: aws sts get-caller-identity

      - name: CDK deploy all stacks
        run: npx -y aws-cdk@2 cdk deploy --require-approval never --all

  diagnostic:
    name: Capture deployed resources
    runs-on: ubuntu-latest
    needs: deploy
    if: >-
      github.event_name == 'push' &&
      github.ref == 'refs/heads/main'
    defaults:
      run:
        working-directory: infra/cdk
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.OIDC_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: cdk-diagnostic-${{ github.run_id }}

      - name: Inventory deployed resources
        run: |
          python - <<'PY'
          import json
          import subprocess

          def aws_cli(command: list[str]) -> dict:
              result = subprocess.run(
                  ["aws", *command],
                  check=True,
                  capture_output=True,
                  text=True,
              )
              return json.loads(result.stdout)

          print("::group::Bootstrap information")
          toolkit = aws_cli([
              "cloudformation",
              "describe-stacks",
              "--stack-name",
              "CDKToolkit",
          ])
          outputs = toolkit["Stacks"][0].get("Outputs", [])
          for output in outputs:
              if output.get("OutputKey") == "BucketName":
                  print(f"Bootstrap bucket: {output.get('OutputValue')}")
              if output.get("OutputKey") == "Qualifier":
                  print(f"Bootstrap qualifier: {output.get('OutputValue')}")
          print("::endgroup::")

          print("::group::ReleaseCopilot stacks")
          stacks = aws_cli([
              "cloudformation",
              "list-stacks",
              "--stack-status-filter",
              "CREATE_COMPLETE",
              "UPDATE_COMPLETE",
              "UPDATE_ROLLBACK_COMPLETE",
          ])
          stack_names = [
              s["StackName"]
              for s in stacks.get("StackSummaries", [])
              if s["StackName"].startswith("ReleaseCopilot-")
          ]
          for name in stack_names:
              print(f"- {name}")
          print("::endgroup::")

          for name in stack_names:
              resources = aws_cli([
                  "cloudformation",
                  "list-stack-resources",
                  "--stack-name",
                  name,
              ])
              print(f"::group::Resources for {name}")
              for detail in resources.get("StackResourceSummaries", []):
                  logical_id = detail.get("LogicalResourceId")
                  resource_type = detail.get("ResourceType")
                  physical_id = detail.get("PhysicalResourceId")
                  if resource_type == "AWS::Logs::LogGroup":
                      print(f"LogGroup {logical_id}: {physical_id}")
                  if resource_type == "AWS::DynamoDB::Table":
                      print(f"DynamoDB {logical_id}: {physical_id}")
                  if resource_type == "AWS::SecretsManager::Secret":
                      print(f"Secret {logical_id}: {physical_id}")
              print("::endgroup::")
          PY
