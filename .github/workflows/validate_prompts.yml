name: Validate Prompt Waves

on:
  pull_request:
    paths:
      - 'project/prompts/**'
      - 'tools/**'
      - 'actions/**'
      - 'docs/**'
      - 'tests/**'
      - '.github/workflows/validate_prompts.yml'
      - 'pyproject.toml'
      - 'pytest.ini'
      - 'requirements*.txt'
      - 'CHANGELOG.md'

jobs:
  detect-waves:
    runs-on: ubuntu-latest
    outputs:
      prompts: ${{ steps.enumerate.outputs.prompts }}
      has_waves: ${{ steps.enumerate.outputs.has_waves }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Enumerate prompt waves
        id: enumerate
        run: |
          python - <<'PY'
          import json
          import os
          from pathlib import Path

          root = Path("project/prompts")
          config_path = root / "waves.json"
          waves: list[str] = []
          if config_path.exists():
              try:
                  raw = json.loads(config_path.read_text(encoding="utf-8"))
              except json.JSONDecodeError as exc:
                  raise SystemExit(f"Unable to parse {config_path}: {exc}")
              entries = raw.get("waves", [])
              if isinstance(entries, list):
                  for entry in entries:
                      if not isinstance(entry, dict):
                          continue
                      validate = entry.get("validate_recipes", True)
                      if not validate:
                          continue
                      path_value = entry.get("path")
                      if isinstance(path_value, str) and path_value.strip():
                          waves.append(path_value)
                          continue
                      name_value = entry.get("name")
                      if isinstance(name_value, str) and name_value.strip():
                          waves.append(str(root / name_value))

          if not waves and root.exists():
              for path in sorted(root.iterdir()):
                  if path.is_dir() and path.name.lower().startswith("wave"):
                      waves.append(str(path))

          output_path = Path(os.environ["GITHUB_OUTPUT"])
          output = {
              "prompts": json.dumps(waves),
              "has_waves": "true" if waves else "false",
          }
          with output_path.open("a", encoding="utf-8") as handle:
              for key, value in output.items():
                  handle.write(f"{key}={value}\n")
          print(f"Detected prompt waves: {waves if waves else 'none'}")
          PY

  validate-prompts:
    needs: detect-waves
    if: ${{ needs.detect-waves.outputs.has_waves == 'true' }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        prompts_dir: ${{ fromJSON(needs.detect-waves.outputs.prompts) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Validate prompt coverage
        run: |
          python tools/validate_prompts.py --prompts-dir "${{ matrix.prompts_dir }}" --recipes-dir project/prompts/prompt_recipes

  quality-gate:
    needs:
      - detect-waves
      - validate-prompts
    if: ${{ needs.detect-waves.outputs.has_waves == 'false' || needs.validate-prompts.result == 'success' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]
          pip install -r requirements-dev.txt

      - name: Ruff
        run: ruff check .

      - name: Ruff format
        run: ruff format --check .

      - name: Mypy
        run: mypy tools/validate_prompts.py tools/render_actions_comment.py

      - name: Pytest with coverage
        run: pytest --cov=. --cov-report=term-missing --cov-fail-under=70
