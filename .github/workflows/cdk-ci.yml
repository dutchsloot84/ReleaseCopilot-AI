name: cdk-ci

on:
  pull_request:
    branches:
      - main
    paths:
      - 'infra/**'
      - 'cdk/**'
      - 'cdk.json'
      - 'cdk/cdk.json'
      - 'package*.json'
      - 'requirements*.txt'
      - '.github/workflows/cdk-ci.yml'
  push:
    branches:
      - main
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: us-west-2
  OIDC_ROLE_ARN: ${{ vars.OIDC_ROLE_ARN }}

jobs:
  validate:
    name: Validate CDK app
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Show repo layout (top)
        working-directory: ${{ github.workspace }}
        run: |
          echo "Workspace root contents"
          pwd
          ls -la
          git rev-parse --show-toplevel

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: infra/cdk/requirements.txt

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Preflight — cdk.json discovery
        working-directory: ${{ github.workspace }}
        run: |
          echo "Scanning for cdk.json files..."
          mapfile -t CDK_JSONS < <(git ls-files | grep -E '(^|/)cdk.json$' || true)
          printf "Found:\n%s\n" "${CDK_JSONS[@]:-<none>}"
          COUNT=${#CDK_JSONS[@]}
          if [ "$COUNT" -eq 0 ]; then
            echo "::error::No cdk.json found anywhere in the repo."
            exit 1
          fi

          # Enforce canonical location
          if [ ! -f infra/cdk/cdk.json ]; then
            echo "::error::Expected canonical cdk.json at infra/cdk/cdk.json but it is missing."
            exit 1
          fi

          # If a second cdk.json exists elsewhere, warn loudly and print diff of app values
          for p in "${CDK_JSONS[@]}"; do
            if [ "$p" != "infra/cdk/cdk.json" ]; then
              echo "::warning::Extra cdk.json detected at: $p"
              echo "Canonical (infra/cdk/cdk.json):"
              jq '.app' infra/cdk/cdk.json || true
              echo "Extra ($p):"
              jq '.app' "$p" || true
            fi
          done

      - name: Enforce canonical cdk.json
        working-directory: ${{ github.workspace }}
        run: bash scripts/ci/check_single_cdk_json.sh

      - name: Preflight — validate canonical app
        run: |
          echo "PWD=$(pwd)"
          ls -la

          if [ ! -f infra/cdk/cdk.json ]; then
            echo "::error::Missing infra/cdk/cdk.json"
            exit 1
          fi

          echo "cdk.json:"
          cat infra/cdk/cdk.json
          APP=$(jq -r '.app // empty' infra/cdk/cdk.json || true)
          if [ -z "$APP" ] || [ "$APP" = "null" ]; then
            echo "::error::cdk.json exists but \"app\" is empty/missing."
            exit 1
          fi
          echo "Raw app from cdk.json: $APP"

          # Enforce python3 on GH runners (replace leading `python ` with `python3 `)
          if echo "$APP" | grep -qE '^python(\s|$)'; then
            APP="python3${APP#python}"
            echo "Normalized app to use python3: $APP"
          fi

          # Validate that the referenced script exists
          # Extract the first non-option arg after python3 for path check
          FIRST_ARG=$(awk '{for(i=1;i<=NF;i++){if($i ~ /\.py$/){print $i; exit}}}' <<< "$APP")
          if [ -n "$FIRST_ARG" ]; then
            if [ ! -f "$FIRST_ARG" ]; then
              echo "::error::App entry file not found: $FIRST_ARG (from app: \"$APP\")"
              exit 1
            fi
          else
            echo "::warning::Could not automatically detect a .py entry file from app. Ensure it exists."
          fi

          # Export for subsequent steps
          echo "APP=$APP" >> $GITHUB_ENV

      - name: Install Python deps (CDK app)
        run: |
          python3 -V
          # Check and install paths must be relative to the root
          if [ -f infra/cdk/requirements.txt ]; then
            python3 -m pip install --upgrade pip
            python3 -m pip install -r infra/cdk/requirements.txt
          fi
          # Check and install paths must be relative to the root
          if [ -f infra/cdk/requirements-dev.txt ]; then
            python3 -m pip install -r infra/cdk/requirements-dev.txt
          fi

      - name: Install Node deps (if Node app)
        if: ${{ hashFiles('infra/cdk/package.json') != '' }}
        run: |
          if [ -f package-lock.json ]; then npm ci; else npm install; fi
          if jq -e '.scripts.build' package.json >/dev/null 2>&1; then npm run build; fi

      - name: Python preflight
        run: |
          python3 infra/cdk/scripts/preflight.py
          python3 infra/cdk/run_cdk_app.py --help || true

      - name: CDK doctor
        run: |
          npx -y aws-cdk@2 cdk --version
          npx -y aws-cdk@2 cdk doctor || true
          cat cdk.context.json || true

      - name: Configure AWS credentials
        if: env.OIDC_ROLE_ARN != ''
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.OIDC_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: cdk-deploy-${{ github.run_id }}

      - name: Who am I
        if: env.OIDC_ROLE_ARN != ''
        run: aws sts get-caller-identity

      - name: CDK list (verbose with fallback)
        run: |
          set -e
          echo "Attempt 1: cdk -v list"
          if ! npx -y aws-cdk@2 cdk -v list; then
            echo "Attempt 1 failed; trying explicit -a"
            echo "Using APP from env: $APP"
            npx -y aws-cdk@2 cdk -v -a "$APP" list
          fi

      - name: CDK synth
        run: npx -y aws-cdk@2 cdk synth

      - name: CDK diff
        continue-on-error: true
        run: npx -y aws-cdk@2 cdk diff || true

      - name: Upload synthesized app
        if: always() && hashFiles('infra/cdk/cdk.out/**') != ''
        uses: actions/upload-artifact@v4
        with:
          name: cdk.out
          path: infra/cdk/cdk.out

  deploy:
    name: Deploy CDK app
    runs-on: ubuntu-latest
    needs: validate
    if: >-
      github.event_name == 'push' &&
      (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Preflight — cdk.json discovery
        working-directory: ${{ github.workspace }}
        run: |
          echo "Scanning for cdk.json files..."
          mapfile -t CDK_JSONS < <(git ls-files | grep -E '(^|/)cdk.json$' || true)
          printf "Found:\n%s\n" "${CDK_JSONS[@]:-<none>}"
          COUNT=${#CDK_JSONS[@]}
          if [ "$COUNT" -eq 0 ]; then
            echo "::error::No cdk.json found anywhere in the repo."
            exit 1
          fi

          if [ ! -f infra/cdk/cdk.json ]; then
            echo "::error::Expected canonical cdk.json at infra/cdk/cdk.json but it is missing."
            exit 1
          fi

          for p in "${CDK_JSONS[@]}"; do
            if [ "$p" != "infra/cdk/cdk.json" ]; then
              echo "::warning::Extra cdk.json detected at: $p"
              echo "Canonical (infra/cdk/cdk.json):"
              jq '.app' infra/cdk/cdk.json || true
              echo "Extra ($p):"
              jq '.app' "$p" || true
            fi
          done

      - name: Enforce canonical cdk.json
        working-directory: ${{ github.workspace }}
        run: bash scripts/ci/check_single_cdk_json.sh

      - name: Preflight — validate canonical app
        run: |
          echo "PWD=$(pwd)"
          ls -la

          if [ ! -f cdk.json ]; then
            echo "::error::Missing infra/cdk/cdk.json"
            exit 1
          fi

          echo "cdk.json:"
          cat cdk.json
          APP=$(jq -r '.app // empty' cdk.json || true)
          if [ -z "$APP" ] || [ "$APP" = "null" ]; then
            echo "::error::cdk.json exists but \"app\" is empty/missing."
            exit 1
          fi
          echo "Raw app from cdk.json: $APP"

          if echo "$APP" | grep -qE '^python(\s|$)'; then
            APP="python3${APP#python}"
            echo "Normalized app to use python3: $APP"
          fi

          FIRST_ARG=$(awk '{for(i=1;i<=NF;i++){if($i ~ /\.py$/){print $i; exit}}}' <<< "$APP")
          if [ -n "$FIRST_ARG" ]; then
            if [ ! -f "$FIRST_ARG" ]; then
              echo "::error::App entry file not found: $FIRST_ARG (from app: \"$APP\")"
              exit 1
            fi
          else
            echo "::warning::Could not automatically detect a .py entry file from app. Ensure it exists."
          fi

          echo "APP=$APP" >> $GITHUB_ENV

      - name: Install Python deps (CDK app)
        run: |
          python3 -V
          # Check and install paths must be relative to the root
          if [ -f infra/cdk/requirements.txt ]; then
            python3 -m pip install --upgrade pip
            python3 -m pip install -r infra/cdk/requirements.txt
          fi
          # Check and install paths must be relative to the root
          if [ -f infra/cdk/requirements-dev.txt ]; then
            python3 -m pip install -r infra/cdk/requirements-dev.txt
          fi

      - name: Install Node deps (if Node app)
        if: ${{ hashFiles('infra/cdk/package.json') != '' }}
        run: |
          if [ -f package-lock.json ]; then npm ci; else npm install; fi
          if jq -e '.scripts.build' package.json >/dev/null 2>&1; then npm run build; fi

      - name: Python preflight
        run: |
          python3 infra/cdk/scripts/preflight.py
          python3 infra/cdk/run_cdk_app.py --help || true

      - name: CDK doctor
        run: |
          npx -y aws-cdk@2 cdk --version
          npx -y aws-cdk@2 cdk doctor || true
          cat cdk.context.json || true

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.OIDC_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: cdk-deploy-${{ github.run_id }}

      - name: Who am I
        run: aws sts get-caller-identity

      - name: CDK list (verbose with fallback)
        run: |
          set -e
          echo "Attempt 1: cdk -v list"
          if ! npx -y aws-cdk@2 cdk -v list; then
            echo "Attempt 1 failed; trying explicit -a"
            echo "Using APP from env: $APP"
            npx -y aws-cdk@2 cdk -v -a "$APP" list
          fi

      - name: CDK deploy all stacks
        run: npx -y aws-cdk@2 cdk deploy --require-approval never --all
