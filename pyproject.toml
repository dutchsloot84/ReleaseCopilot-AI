[build-system]
requires = ["setuptools>=68", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "releasecopilot-ai"
version = "0.0.0"
description = "Release Copilot automation tooling"
readme = "README.md"
requires-python = ">=3.10"
license = {file = "LICENSE"}
authors = [{name = "Release Copilot Team"}]
dependencies = [
    "boto3>=1.34.0",
    "click>=8.1.7",
    "requests>=2.31.0",
    "pandas>=2.1.0",
    "openpyxl>=3.1.0",
    "PyYAML>=6.0.0",
    "Jinja2>=3.1.0",
    "python-slugify>=8.0.0",
]

[project.optional-dependencies]
dev = [
    "aws-cdk-lib==2.154.1",
    "constructs==10.3.0",
    "python-dotenv>=1.0.0",
    "ruff==0.6.9",
    "pytest==8.3.3",
    "pytest-cov==5.0.0",
    "jsonschema>=4.23.0",
    "black==24.10.0",
    "mypy==1.11.2",
    "pre-commit==3.8.0",
    "types-PyYAML==6.0.12.20240808",
    "types-requests==2.32.0.20241016",
    "ruamel.yaml==0.18.6",
]
docs = [
    "mkdocs==1.6.1",
    "mkdocs-material==9.5.39",
    "pymdown-extensions==10.11.2",
]
optional = [
    "python-dotenv>=1.0.0",
]

[project.scripts]
rc = "releasecopilot.cli.__main__:main"
rc-audit = "releasecopilot.entrypoints.audit:main"
rc-recover = "releasecopilot.entrypoints.recover:main"
rc-wave2 = "releasecopilot.entrypoints.wave2:main"

[tool.setuptools.packages.find]
where = ["src", "."]
include = [
    "releasecopilot*",
    "cli*",
    "export*",
    "matcher*",
    "ops*",
    "tracking*",
    "clients*",
    "config*",
    "exporters*",
    "processors*",
    "services*",
    "ui*",
    "tools*",
    "scripts*",
]
exclude = [
    "tests*",
    "docs*",
    "backlog*",
    "artifacts*",
    "reports*",
    "dist*",
    "temp_data*",
    "rag-aws*",
    "infra*",
    "cdk*",
]

[tool.ruff]
line-length = 100
target-version = "py310"
src = ["src", "."]

[tool.ruff.lint]
select = ["E4", "F"]
extend-select = ["I"]
ignore = []
fixable = ["ALL"]

[tool.ruff.lint.isort]
known-first-party = [
    "releasecopilot",
    "cli",
    "clients",
    "config",
    "export",
    "matcher",
    "ops",
    "processors",
    "services",
    "tracking",
    "ui",
]
combine-as-imports = true
force-sort-within-sections = true

[tool.ruff.format]
quote-style = "double"

[tool.black]
line-length = 100
target-version = ["py310"]

[tool.mypy]
python_version = "3.11"
mypy_path = ["src"]
explicit_package_bases = true
namespace_packages = true
ignore_missing_imports = true
follow_imports = "silent"
warn_unused_configs = true
warn_redundant_casts = true
show_error_codes = true
files = ["src", "tests"]

[[tool.mypy.overrides]]
module = "rag_aws.*"
ignore_errors = true

[[tool.mypy.overrides]]
module = "services.*"
ignore_errors = true

[[tool.mypy.overrides]]
module = "tests.*"
ignore_errors = true

[tool.pytest.ini_options]
addopts = "-q --cov=src --cov-report=xml --cov-report=json"
markers = [
    "integration: integration-level recovery tool tests",
    "network: tests that require live network access",
]
pythonpath = ["src", "."]
testpaths = ["tests"]
tmp_path_retention_count = 3
tmp_path_retention_policy = "failed"

[tool.coverage.run]
source = ["src"]
branch = true

[tool.coverage.report]
omit = [
    "infra/**",
    "scripts/**",
    "tools/**",
    "services/**/handler.py",  # if not exercised in unit tests
    "src/**/__main__.py",
]
fail_under = 70
