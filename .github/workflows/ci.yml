name: CI

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  push:
    branches:
      - main
      - 'feature/**'
      - 'codex/**'
    tags:
      - 'v*.*.*'
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      run_uploader:
        description: 'Run the optional release uploader'
        required: false
        default: false
        type: boolean
      fix_version:
        description: 'Fix version to use when running the uploader'
        required: false
        type: string

permissions:
  contents: write
  pull-requests: write

jobs:
  checks:
    name: Checks (Python 3.11.7)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event_name == 'pull_request' && github.head_ref || github.ref }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11.7'

      - name: Install Poetry
        run: |
          python -m pip install --upgrade pip
          python -m pip install poetry==1.8.3

      - name: Show Poetry version
        run: poetry --version

      - name: Install dependencies
        run: poetry install --no-interaction --no-ansi

      - name: Verify lockfile
        run: poetry lock --check

      - name: Ruff lint
        run: poetry run ruff check .

      - name: Ruff format check
        run: poetry run ruff format --check .

      - name: Run pre-commit
        run: poetry run pre-commit run --all-files

      - name: Type checking
        run: poetry run mypy .

      - name: Pytest
        run: poetry run pytest

      - name: Sanity versions
        run: |
          poetry run python - <<'PY'
          import platform
          import sys

          print("PY", sys.version)
          print("PLAT", platform.platform())
          try:
              import numpy
              import pandas
              print("NUMPY", numpy.__version__)
              print("PANDAS", pandas.__version__)
          except Exception as exc:  # pragma: no cover - diagnostic output
              print("IMPORT_ERR", exc)
              raise
          PY

  package:
    name: Package Lambda bundle
    runs-on: ubuntu-latest
    needs: checks
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11.7'

      - name: Install Poetry
        run: |
          python -m pip install --upgrade pip
          python -m pip install poetry==1.8.3

      - name: Install dependencies
        run: poetry install --no-interaction --no-ansi --with dev

      - name: Build Lambda bundle
        run: |
          set -euo pipefail
          mkdir -p dist
          if [ -f scripts/package_lambda.py ]; then
            poetry run python scripts/package_lambda.py --out dist/lambda_bundle.zip
          elif [ -f scripts/package_lambda.sh ]; then
            bash scripts/package_lambda.sh
            cd dist
            rm -f lambda_bundle.zip
            if [ -d lambda ]; then
              zip -r lambda_bundle.zip lambda
            else
              echo "Expected dist/lambda directory to exist after package script" >&2
              exit 1
            fi
          else
            echo "No packaging helper found; creating fallback archive" >&2
            rm -f dist/lambda_bundle.zip
            zip -r dist/lambda_bundle.zip aws clients config exporters processors main.py
          fi

      - name: Verify Lambda bundle artifact
        run: test -s dist/lambda_bundle.zip

      - name: Upload Lambda bundle artifact
        if: ${{ github.event_name != 'workflow_dispatch' }}
        uses: actions/upload-artifact@v4
        with:
          name: lambda_bundle
          path: dist/lambda_bundle.zip
          if-no-files-found: error
          retention-days: ${{ startsWith(github.ref, 'refs/tags/') && 30 || 7 }}

  cdk-synth:
    name: CDK synth
    runs-on: ubuntu-latest
    needs: checks
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11.7'

      - name: Install Poetry
        run: |
          python -m pip install --upgrade pip
          python -m pip install poetry==1.8.3

      - name: Install dependencies
        run: poetry install --no-interaction --no-ansi --with dev

      - name: Install CDK requirements
        run: poetry run python -m pip install -r infra/cdk/requirements.txt

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Verify Node.js runtime
        run: node --version

      - name: Install AWS CDK
        run: npm install -g aws-cdk@2

      - name: Diagnose working dir & cdk.json
        run: |
          set -xeuo pipefail
          echo "PWD=$(pwd)"
          ls -la
          echo '--- cdk.json ---'
          test -f cdk.json && cat cdk.json || echo 'NO ROOT cdk.json FOUND'

      - name: Synthesize CDK app (root, explicit app)
        run: |
          npx cdk synth -a "poetry run python -m infra.cdk.app"

  optional-uploader:
    name: Optional release uploader
    if: ${{ github.event_name == 'workflow_dispatch' && inputs.run_uploader == true }}
    runs-on: ubuntu-latest
    needs: [package]
    permissions:
      contents: read
      id-token: write
    env:
      AWS_REGION: ${{ vars.AWS_REGION || 'us-west-2' }}
      RC_S3_BUCKET: ${{ secrets.RC_S3_BUCKET }}
      RC_S3_PREFIX: releasecopilot
      FIX_VERSION: ${{ inputs.fix_version }}
      PYTHONPATH: src
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11.7'

      - name: Install Poetry
        run: |
          python -m pip install --upgrade pip
          python -m pip install poetry==1.8.3

      - name: Install dependencies
        run: poetry install --no-interaction --no-ansi --with dev

      - name: Compute OIDC availability flags
        env:
          ROLE: ${{ secrets.AWS_ROLE_TO_ASSUME }}
        run: |
          if [ -n "$ROLE" ]; then
            echo "AWS_ROLE_TO_ASSUME=$ROLE" >> "$GITHUB_ENV"
            echo "OIDC_PRESENT=true" >> "$GITHUB_ENV"
          else
            echo "OIDC_PRESENT=false" >> "$GITHUB_ENV"
          fi

      - name: Configure AWS credentials (OIDC)
        if: ${{ env.OIDC_PRESENT == 'true' }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Resolve fix version and run uploader
        env:
          GIT_REF_TYPE: ${{ github.ref_type }}
          GIT_REF_NAME: ${{ github.ref_name }}
        run: |
          if [ -z "$FIX_VERSION" ]; then
            if [ "$GIT_REF_TYPE" = "tag" ]; then
              FIX_VERSION="$GIT_REF_NAME"
            else
              FIX_VERSION="$(date +%Y.%m.%d)"
            fi
          fi

          if [ -z "$RC_S3_BUCKET" ]; then
            echo "RC_S3_BUCKET not set; skipping upload." >&2
            exit 0
          fi

          poetry run python -m releasecopilot.cli \
            --fix-version "$FIX_VERSION" \
            --s3-bucket "$RC_S3_BUCKET" \
            --s3-prefix "$RC_S3_PREFIX"
