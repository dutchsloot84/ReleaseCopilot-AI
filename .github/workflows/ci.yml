name: CI

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  contents: write
  pull-requests: write

jobs:
  quality:
    name: Quality checks (Python 3.11.7)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event_name == 'pull_request' && github.head_ref || github.ref }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11.7'

      - name: Install pipx and Poetry
        run: |
          python -m pip install --user pipx
          echo "$HOME/.local/bin" >> "$GITHUB_PATH"
          ~/.local/bin/pipx install poetry==1.8.3

      - name: Configure Poetry
        run: |
          poetry config virtualenvs.create true

      - name: Install dependencies
        run: |
          poetry install --no-interaction --no-ansi

      - name: Run ruff lint
        run: poetry run ruff check .

      - name: Run ruff format check
        run: poetry run ruff format --check .

      - name: Verify clean working tree after linting
        run: |
          if ! git diff --quiet; then
            echo "Linting produced changes even though CI runs check-only." >&2
            echo "Run 'pre-commit run --all-files' locally or wait for pre-commit.ci to push fixes." >&2
            git status
            exit 1
          fi

      - name: Run mypy
        run: poetry run mypy .

      - name: Clean Python caches
        run: |
          rm -rf .mypy_cache .pytest_cache
          find . -path './.venv' -prune -o -name '__pycache__' -type d -exec rm -rf '{}' +

      - name: Determine coverage scope
        run: |
          set -eo pipefail
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            base=${{ github.event.pull_request.base.sha }}
          else
            base=${{ github.event.before }}
          fi
          if [ -z "$base" ]; then
            base=$(git rev-parse HEAD^)
          fi
          git fetch --no-tags --depth=1 origin "$base" || true
          git diff --name-only "$base" "$GITHUB_SHA" -- '*.py' > coverage_paths.txt
          python - <<'PY'
          import os
          from pathlib import Path

          paths = Path('coverage_paths.txt').read_text().split()
          value = ' '.join(paths)
          with open(os.environ['GITHUB_ENV'], 'a', encoding='utf-8') as env:
              env.write(f'COVERAGE_PATHS={value}\n')
          PY

      - name: Run pytest with coverage gate
        run: |
          poetry run pytest -q
          if [ -n "$COVERAGE_PATHS" ]; then
            poetry run python tools/coverage_gate.py coverage.json --paths $COVERAGE_PATHS
          else
            poetry run python tools/coverage_gate.py coverage.json
          fi

      - name: Coverage PR comment
        if: ${{ github.event_name == 'pull_request' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [ -n "$COVERAGE_PATHS" ]; then
            poetry run python -m releasecopilot.cli pr-comment coverage --file coverage.json --paths $COVERAGE_PATHS
          else
            poetry run python -m releasecopilot.cli pr-comment coverage --file coverage.json
          fi
